name: Build Resource Provider

on:
  schedule:
    - cron: "15 4 * * 6"
  push:
    branches: [main]
    # Draft releases don't trigger actions, so create releases in the workflow
    # from tag events.
    tags: [resource-*]
  pull_request: ~

jobs:
  get-providers:
    runs-on: ubuntu-latest
    outputs:
      providers: ${{ steps.list-providers.outputs.keys || steps.tag-provider.outputs.keys }}
    steps:
      - uses: actions/checkout@v4
      - id: tag-provider
        if: startswith(github.event.ref, 'refs/tags/')
        run: |
          echo "${{ github.ref_name }}" | sed -nr 's/^resource-([a-z.-]+)-v[0-9].*$/keys=["\1"]/p; t; q1' >> $GITHUB_OUTPUT
      - id: list-providers
        if: ${{ !startswith(github.event.ref, 'refs/tags/') }}
        run: |
          echo 'keys<<EOF' >> $GITHUB_OUTPUT
          ls internal/provider/crd/versions \
            | xargs -I{} basename {} .yaml \
            | jq --null-input --raw-input '[inputs]' >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

  test:
    runs-on: ubuntu-latest
    needs: [get-providers]
    strategy:
      fail-fast: false
      matrix:
        provider: ${{ fromJson(needs.get-providers.outputs.providers) }}
    env:
        TF_ACC: "1"
        PROVIDER: ${{ matrix.provider }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: create kind cluster
        run: |
            kind create cluster --kubeconfig=./kubeconfig.yaml
            echo KUBECONFIG=$(pwd)/kubeconfig.yaml >> "$GITHUB_ENV"

      - name: install fixtures
        run: |
          VERSIONS=internal/provider/crd/versions/${PROVIDER}.yaml
          yq -0 '.crdSources[]' < $VERSIONS \
            | xargs -0 -n1 kubectl apply --server-side -o name --filename \
            | xargs --no-run-if-empty kubectl wait --for condition=established

          for i in $(seq $(yq '.extraResources | length' < $VERSIONS )); do
            yq -0 ".extraResources[$i - 1].kustomization" < $VERSIONS \
              | xargs -0 -n1 kubectl apply --server-side --kustomize
            yq -0 ".extraResources[$i - 1].wait[]" < $VERSIONS \
              | xargs -0 -n1 sh -c 'kubectl wait --timeout=2m --for $@' '$0'
          done;

          kubectl apply --server-side -f internal/provider/crd/fixtures/${PROVIDER}/data.yaml

      - name: configure provider
        run: |
          sed -i -e "1 {s|example\\.com\\.yaml$|${PROVIDER}.yaml|; t; q1}" internal/provider/crd/crd.go

      - name: go generate
        run: |
          go install ./cmd/openapi
          go generate -x ./internal/provider/crd/...

      - name: upload type info
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.provider }}-typeInfos
          path: internal/provider/crd/typeInfos.bin

      - name: go test
        run: |
          go test -v $(go list -f '{{ join .Deps "\n" }}' ./cmd/provider | grep github.com/kwohlfahrt/terraform-provider-k8scrd)

  build:
    if: startswith(github.event.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: [get-providers, test]
    strategy:
      matrix:
        provider: ${{ fromJson(needs.get-providers.outputs.providers) }}
        os: ["darwin", "linux", "windows"]
        arch: ["amd64", "arm64", "riscv64"]
        exclude:
          - os: darwin
            arch: riscv64
          - os: windows
            arch: riscv64
    env:
        PROVIDER: ${{ matrix.provider }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: download generated code
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.provider }}-typeInfos
          path: internal/provider/crd

      - name: go build
        id: build
        run: |
          export GOOS=${{ matrix.os }}
          export GOARCH=${{ matrix.arch }}
          PROVIDER_NAME=terraform-provider-k8s-$(echo $PROVIDER | sed -e 's/\./-/')_${GOOS}_${GOARCH}
          echo provider-name=$PROVIDER_NAME >> $GITHUB_OUTPUT
          go build -o $PROVIDER_NAME ./cmd/provider

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.provider-name }}
          path: ${{ steps.build.outputs.provider-name }}

  publish:
    if: startswith(github.event.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: [build]
    permissions:
      contents: write
    steps:
      - name: parse tag
        id: meta
        run: |
          echo "${{ github.ref_name }}" \
            | sed -nr 's/^resource-([a-z.-]+)-(v[0-9].*)$/name=\1\nversion=\2/p; t; q1' >> $GITHUB_OUTPUT
      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true
      - uses: softprops/action-gh-release@v2
        with:
          name: ${{ steps.meta.outputs.name }} ${{ steps.meta.outputs.version }}
          draft: true
          fail_on_unmatched_files: true
          files: |
            terraform-provider-k8s-*
